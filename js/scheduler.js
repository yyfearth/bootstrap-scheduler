// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var Scheduler;

  Scheduler = (function() {
    Scheduler.prototype._selected = {};

    function Scheduler(options) {
      this.options = options != null ? options : {};
      this.$el = $(this.options.el);
      if (!this.$el.length) {
        throw 'cannot find el ' + this.options.el;
      }
      this.el = this.$el[0];
      this.$left = this.$el.find('.datepickers>.left');
      this.$right = this.$el.find('.datepickers>.right');
      console.log(this.el, this.$left.length, this.$right.length);
      this.$els = this.$left.add(this.$right).datepicker({
        todayHighlight: true,
        keyboardNavigation: false
      });
      this.left = this.$left.data('datepicker');
      this.right = this.$right.data('datepicker');
      this._bind();
      this.go();
    }

    Scheduler.prototype._bind = function() {
      var dragging_start,
        _this = this;
      this.$els.on('mousewheel DOMMouseScroll', function(e) {
        var datepicker;
        e.preventDefault();
        e = e.originalEvent;
        datepicker = $.data(this, 'datepicker');
        if (datepicker != null) {
          datepicker.go(e.wheelDelta > 0 || e.detail < 0 ? -1 : 1);
        }
        return false;
      });
      this.$els.on({
        changeMonth: function(e) {
          return _this.showSelected(e.target);
        },
        changeDate: function(e) {
          _this.toggleDate(e.date);
          _this.showSelected();
          return _this.showSelected(e.target, 1);
        }
      });
      dragging_start = null;
      this.$els.on('mousedown', '.day', function() {
        dragging_start = this;
        return true;
      });
      this.$els.on('mouseenter', '.day', function(e) {
        if (dragging_start) {
          _this.highlight(dragging_start, e.target);
        }
        return true;
      });
      this.$els.on('mouseup', '.day', function(e) {
        var func;
        if (dragging_start && dragging_start !== e.target) {
          func = e.altKey ? _this.removeDate : _this.addDate;
          _this.selectRange(dragging_start, e.target, func.bind(_this));
        }
        dragging_start = null;
        return true;
      });
      this.$el.on('mouseleave', function() {
        _this.highlight(null);
        dragging_start = null;
        return true;
      });
      this.$el.find('.btn-today').click(function() {
        return _this.go();
      });
      return this.$el.find('.btn-clean').click(function() {
        return _this.clean();
      });
    };

    Scheduler;

    Scheduler.prototype._getDateKey = function(date) {
      return date.toISOString().slice(0, 10);
    };

    Scheduler.prototype._getTS = function(date) {
      if (date.dataset != null) {
        return new Date($.data(date, 'date-key')).getTime();
      } else if (date instanceof Date) {
        return date.getTime();
      } else if (typeof date === 'number') {
        return date;
      } else {
        return new Date(date).getTime();
      }
    };

    Scheduler.prototype._betweenDate = function(from, to, pass, func) {
      var cur, p;
      from = this._getTS(from);
      to = this._getTS(to);
      if (from > to) {
        cur = to;
        to = from;
      } else {
        cur = from;
      }
      if (pass) {
        while (cur <= to) {
          func(new Date(cur));
          cur += 86400000;
        }
        return null;
      } else {
        p = [];
        if (to - cur > 100000) {
          while (cur <= to) {
            p.push(func(new Date(cur)));
            cur += 86400000;
          }
        }
        return p;
      }
    };

    Scheduler.prototype.getSelection = function() {
      var sel;
      sel = this._selected;
      return Object.keys(sel).map(function(key) {
        return sel[key];
      }).sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
    };

    Scheduler.prototype.showSelected = function(target, delay) {
      var _t,
        _this = this;
      if (target == null) {
        this.showSelected(this.$left[0], delay);
        this.showSelected(this.$right[0], delay);
      } else {
        _t = $.data(target, '_refresh_sel_t');
        if (_t) {
          _t = clearTimeout(_t);
        }
        if (delay < 10) {
          this._showSelected(target);
        } else {
          _t = setTimeout(function() {
            _this._showSelected(target);
            return $.data(target, '_refresh_sel_t', null);
          }, delay);
        }
        $.data(target, '_refresh_sel_t', _t);
      }
      return this;
    };

    Scheduler.prototype._showSelected = function(target) {
      var datepicker, _selected;
      datepicker = $.data(target, 'datepicker');
      _selected = this._selected;
      return $(target).find('.day').each(function() {
        var el, key;
        el = $(this);
        if (!el.is('.disabled')) {
          key = el.data('date-key');
          if (_selected.hasOwnProperty(key)) {
            return el.addClass('active');
          } else {
            return el.removeClass('active');
          }
        }
      });
    };

    Scheduler.prototype.toggleDate = function(date) {
      var key;
      if (!(date instanceof Date)) {
        throw 'invalid date which is not a Date object';
      }
      key = this._getDateKey(date);
      if (this._selected.hasOwnProperty(key)) {
        return delete this._selected[key];
      } else {
        return this._selected[key] = date;
      }
    };

    Scheduler.prototype.addDate = function(date) {
      var key;
      if (!(date instanceof Date)) {
        throw 'invalid date which is not a Date object';
      }
      key = this._getDateKey(date);
      return this._selected[key] = date;
    };

    Scheduler.prototype.removeDate = function(date) {
      var key;
      if (!(date instanceof Date)) {
        throw 'invalid date which is not a Date object';
      }
      key = this._getDateKey(date);
      return delete this._selected[key];
    };

    Scheduler.prototype.go = function(date) {
      var nextMonth;
      if (date == null) {
        date = new Date;
      }
      nextMonth = this.right.moveMonth(date, 1);
      this.left.viewDate = date;
      this.right.viewDate = nextMonth;
      this.left.fill();
      this.right.fill();
      return this.showSelected();
    };

    Scheduler.prototype.clean = function() {
      this._selected = {};
      return this.showSelected();
    };

    Scheduler.prototype.highlight = function(from, to) {
      var q, _getDateKey;
      this.$els.find('.day.drag').removeClass('drag');
      if (from && to) {
        _getDateKey = this._getDateKey;
        q = this._betweenDate(from, to, false, function(date) {
          return ".day[data-date-key=" + (_getDateKey(date)) + "]";
        });
        if (q.length) {
          return this.$els.find(q.join(',')).addClass('drag');
        }
      }
    };

    Scheduler.prototype.selectRange = function(from, to, addOrRemove) {
      if (addOrRemove == null) {
        addOrRemove = this.addDate;
      }
      this.$els.find('.day.drag').removeClass('drag');
      this._betweenDate(from, to, true, addOrRemove);
      return this.showSelected();
    };

    return Scheduler;

  })();

  window.schr = new Scheduler({
    el: '.scheduler'
  });

}).call(this);

/*
//@ sourceMappingURL=scheduler.map
*/
